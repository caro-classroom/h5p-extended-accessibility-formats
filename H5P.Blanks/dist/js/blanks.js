/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./H5P.Blanks/src/blanks.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./H5P.Blanks/src/blanks.js":
/*!**********************************!*\
  !*** ./H5P.Blanks/src/blanks.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/*global H5P*/\nH5P.Blanks = function ($, Question) {\n  /**\n   * @constant\n   * @default\n   */\n  var STATE_ONGOING = 'ongoing';\n  var STATE_CHECKING = 'checking';\n  var STATE_SHOWING_SOLUTION = 'showing-solution';\n  var STATE_FINISHED = 'finished';\n  var XAPI_ALTERNATIVE_EXTENSION = 'https://h5p.org/x-api/alternatives';\n  var XAPI_CASE_SENSITIVITY = 'https://h5p.org/x-api/case-sensitivity';\n  var XAPI_REPORTING_VERSION_EXTENSION = 'https://h5p.org/x-api/h5p-reporting-version';\n  /**\n   * @typedef {Object} Params\n   *  Parameters/configuration object for Blanks\n   *\n   * @property {Object} Params.behaviour\n   * @property {string} Params.behaviour.confirmRetryDialog\n   * @property {string} Params.behaviour.confirmCheckDialog\n   *\n   * @property {Object} Params.confirmRetry\n   * @property {string} Params.confirmRetry.header\n   * @property {string} Params.confirmRetry.body\n   * @property {string} Params.confirmRetry.cancelLabel\n   * @property {string} Params.confirmRetry.confirmLabel\n   *\n   * @property {Object} Params.confirmCheck\n   * @property {string} Params.confirmCheck.header\n   * @property {string} Params.confirmCheck.body\n   * @property {string} Params.confirmCheck.cancelLabel\n   * @property {string} Params.confirmCheck.confirmLabel\n   */\n\n  /**\n   * Initialize module.\n   *\n   * @class H5P.Blanks\n   * @extends H5P.Question\n   * @param {Params} params\n   * @param {number} id Content identification\n   * @param {Object} contentData Task specific content data\n   */\n\n  function Blanks(params, id, contentData) {\n    var self = this; // Inheritance\n\n    Question.call(self, 'blanks'); // IDs\n\n    this.contentId = id;\n    this.contentData = contentData;\n    this.params = $.extend(true, {}, {\n      text: \"Fill in\",\n      questions: [\"Oslo is the capital of *Norway*.\"],\n      overallFeedback: [],\n      userAnswers: [],\n      // TODO This isn't in semantics?\n      showSolutions: \"Show solution\",\n      tryAgain: \"Try again\",\n      checkAnswer: \"Check\",\n      changeAnswer: \"Change answer\",\n      notFilledOut: \"Please fill in all blanks to view solution\",\n      answerIsCorrect: \"':ans' is correct\",\n      answerIsWrong: \"':ans' is wrong\",\n      answeredCorrectly: \"Answered correctly\",\n      answeredIncorrectly: \"Answered incorrectly\",\n      solutionLabel: \"Correct answer:\",\n      inputLabel: \"Blank input @num of @total\",\n      inputHasTipLabel: \"Tip available\",\n      tipLabel: \"Tip\",\n      scoreBarLabel: 'You got :num out of :total points',\n      behaviour: {\n        enableRetry: true,\n        enableSolutionsButton: true,\n        enableCheckButton: false,\n        caseSensitive: true,\n        showSolutionsRequiresInput: true,\n        autoCheck: false,\n        separateLines: false,\n        disableImageZooming: false\n      }\n    }, params); // override buttons\n\n    if (self.params.behaviour.disableButtons) {\n      self.params.behaviour.enableRetry = false;\n      self.params.behaviour.enableSolutionsButton = false;\n      self.params.behaviour.enableCheckButton = false;\n      self.params.behaviour.autoCheck = false;\n    } // Delete empty questions\n\n\n    for (var i = this.params.questions.length - 1; i >= 0; i--) {\n      if (!this.params.questions[i]) {\n        this.params.questions.splice(i, 1);\n      }\n    } // Previous state\n\n\n    this.contentData = contentData;\n\n    if (this.contentData !== undefined && this.contentData.previousState !== undefined) {\n      this.previousState = this.contentData.previousState;\n    } // Clozes\n\n\n    this.clozes = []; // Keep track tabbing forward or backwards\n\n    this.shiftPressed = false;\n    H5P.$body.keydown(function (event) {\n      if (event.keyCode === 16) {\n        self.shiftPressed = true;\n      }\n    }).keyup(function (event) {\n      if (event.keyCode === 16) {\n        self.shiftPressed = false;\n      }\n    });\n  } // Inheritance\n\n\n  Blanks.prototype = Object.create(Question.prototype);\n  Blanks.prototype.constructor = Blanks;\n  /**\n   * Registers this question type's DOM elements before they are attached.\n   * Called from H5P.Question.\n   */\n\n  Blanks.prototype.registerDomElements = function () {\n    var self = this; // Check for task media\n\n    var media = self.params.media;\n\n    if (media && media.library) {\n      var type = media.library.split(' ')[0];\n\n      if (type === 'H5P.Image') {\n        if (media.params.file) {\n          // Register task image\n          self.setImage(media.params.file.path, {\n            disableImageZooming: self.params.behaviour.disableImageZooming,\n            alt: media.params.alt,\n            title: media.params.title\n          });\n        }\n      } else if (type === 'H5P.Video') {\n        if (media.params.sources) {\n          // Register task video\n          self.setVideo(media);\n        }\n      }\n    } // Register task introduction text\n\n\n    self.setIntroduction(self.params.text); // Register task content area\n\n    self.setContent(self.createQuestions(), {\n      'class': self.params.behaviour.separateLines ? 'h5p-separate-lines' : ''\n    }); // ... and buttons\n\n    self.registerButtons(); // Restore previous state\n\n    self.setH5PUserState();\n  };\n  /**\n   * Create all the buttons for the task\n   */\n\n\n  Blanks.prototype.registerButtons = function () {\n    var self = this;\n    var $content = $('[data-content-id=\"' + self.contentId + '\"].h5p-content');\n    var $containerParents = $content.parents('.h5p-container'); // select find container to attach dialogs to\n\n    var $container;\n\n    if ($containerParents.length !== 0) {\n      // use parent highest up if any\n      $container = $containerParents.last();\n    } else if ($content.length !== 0) {\n      $container = $content;\n    } else {\n      $container = $(document.body);\n    }\n\n    if (!self.params.behaviour.autoCheck && this.params.behaviour.enableCheckButton) {\n      // Check answer button\n      self.addButton('check-answer', self.params.checkAnswer, function () {\n        self.toggleButtonVisibility(STATE_CHECKING);\n        self.markResults();\n        self.showEvaluation();\n        self.triggerAnswered();\n      }, true, {}, {\n        confirmationDialog: {\n          enable: self.params.behaviour.confirmCheckDialog,\n          l10n: self.params.confirmCheck,\n          instance: self,\n          $parentElement: $container\n        }\n      });\n    } // Show solution button\n\n\n    self.addButton('show-solution', self.params.showSolutions, function () {\n      self.showCorrectAnswers(false);\n    }, self.params.behaviour.enableSolutionsButton); // Try again button\n\n    if (self.params.behaviour.enableRetry === true) {\n      self.addButton('try-again', self.params.tryAgain, function () {\n        self.resetTask();\n        self.$questions.filter(':first').find('input:first').focus();\n      }, true, {}, {\n        confirmationDialog: {\n          enable: self.params.behaviour.confirmRetryDialog,\n          l10n: self.params.confirmRetry,\n          instance: self,\n          $parentElement: $container\n        }\n      });\n    } // Show tts task button\n\n\n    if (self.params.behaviour.enableTTSButtons) {\n      self.addButton(this.params.tts, \"tts\");\n    }\n\n    self.toggleButtonVisibility(STATE_ONGOING);\n  };\n  /**\n   * Find blanks in a string and run a handler on those blanks\n   *\n   * @param {string} question\n   *   Question text containing blanks enclosed in asterisks.\n   * @param {function} handler\n   *   Replaces the blanks text with an input field.\n   * @returns {string}\n   *   The question with blanks replaced by the given handler.\n   */\n\n\n  Blanks.prototype.handleBlanks = function (question, handler) {\n    // Go through the text and run handler on all asterisk\n    var clozeEnd,\n        clozeStart = question.indexOf('*');\n    var self = this;\n\n    while (clozeStart !== -1 && clozeEnd !== -1) {\n      clozeStart++;\n      clozeEnd = question.indexOf('*', clozeStart);\n\n      if (clozeEnd === -1) {\n        continue; // No end\n      }\n\n      var clozeContent = question.substring(clozeStart, clozeEnd);\n      var replacer = '';\n\n      if (clozeContent.length) {\n        replacer = handler(self.parseSolution(clozeContent));\n        clozeEnd++;\n      } else {\n        clozeStart += 1;\n      }\n\n      question = question.slice(0, clozeStart - 1) + replacer + question.slice(clozeEnd);\n      clozeEnd -= clozeEnd - clozeStart - replacer.length; // Find the next cloze\n\n      clozeStart = question.indexOf('*', clozeEnd);\n    }\n\n    return question;\n  };\n  /**\n   * Create questitons html for DOM\n   */\n\n\n  Blanks.prototype.createQuestions = function () {\n    var self = this;\n    var html = '';\n    var clozeNumber = 0;\n\n    for (var i = 0; i < self.params.questions.length; i++) {\n      var question = self.params.questions[i]; // Go through the question text and replace all the asterisks with input fields\n\n      question = self.handleBlanks(question, function (solution) {\n        // Create new cloze\n        clozeNumber += 1;\n        var defaultUserAnswer = self.params.userAnswers.length > self.clozes.length ? self.params.userAnswers[self.clozes.length] : null;\n        var cloze = new Blanks.Cloze(solution, self.params.behaviour, defaultUserAnswer, solution.ttsID, {\n          answeredCorrectly: self.params.answeredCorrectly,\n          answeredIncorrectly: self.params.answeredIncorrectly,\n          solutionLabel: self.params.solutionLabel,\n          inputLabel: self.params.inputLabel,\n          inputHasTipLabel: self.params.inputHasTipLabel,\n          tipLabel: self.params.tipLabel\n        });\n        self.clozes.push(cloze);\n        return cloze;\n      });\n      html += '<div>' + question + '</div>';\n    }\n\n    self.hasClozes = clozeNumber > 0;\n    this.$questions = $(html);\n    this.$questions.find('.h5p-action-button').each(function (i) {\n      $(this).on(\"click\", function () {\n        self.handleTTSButtonClick(this);\n      });\n    }); // Set input fields.\n\n    this.$questions.find('input').each(function (i) {\n      var afterCheck;\n\n      if (self.params.behaviour.autoCheck) {\n        afterCheck = function afterCheck() {\n          var answer = $(\"<div>\").text(this.getUserAnswer()).html();\n          self.read((this.correct() ? self.params.answerIsCorrect : self.params.answerIsWrong).replace(':ans', answer));\n\n          if (self.done || self.allBlanksFilledOut()) {\n            // All answers has been given. Show solutions button.\n            self.toggleButtonVisibility(STATE_CHECKING);\n            self.showEvaluation();\n            self.triggerAnswered();\n            self.done = true;\n          }\n        };\n      }\n\n      self.clozes[i].setInput($(this), afterCheck, function () {\n        self.toggleButtonVisibility(STATE_ONGOING);\n\n        if (!self.params.behaviour.autoCheck) {\n          self.hideEvaluation();\n        }\n      }, i, self.clozes.length);\n    }).keydown(function (event) {\n      var $this = $(this); // Adjust width of text input field to match value\n\n      self.autoGrowTextField($this);\n      var $inputs, isLastInput;\n      var enterPressed = event.keyCode === 13;\n      var tabPressedAutoCheck = event.keyCode === 9 && self.params.behaviour.autoCheck;\n\n      if (enterPressed || tabPressedAutoCheck) {\n        // Figure out which inputs are left to answer\n        $inputs = self.$questions.find('.h5p-input-wrapper:not(.h5p-correct) .h5p-text-input'); // Figure out if this is the last input\n\n        isLastInput = $this.is($inputs[$inputs.length - 1]);\n      }\n\n      if (tabPressedAutoCheck && isLastInput && !self.shiftPressed || enterPressed && isLastInput) {\n        // Focus first button on next tick\n        setTimeout(function () {\n          self.focusButton();\n        }, 10);\n      }\n\n      if (enterPressed) {\n        if (isLastInput) {\n          // Check answers\n          $this.trigger('blur');\n        } else {\n          // Find next input to focus\n          $inputs.eq($inputs.index($this) + 1).focus();\n        }\n\n        return false; // Prevent form submission on enter key\n      }\n    }).on('change', function () {\n      self.answered = true;\n      self.triggerXAPI('interacted');\n    });\n    self.on('resize', function () {\n      self.resetGrowTextField();\n    });\n    return this.$questions;\n  };\n  /**\n   *\n   */\n\n\n  Blanks.prototype.autoGrowTextField = function ($input) {\n    // Do not set text field size when separate lines is enabled\n    if (this.params.behaviour.separateLines) {\n      return;\n    }\n\n    var self = this;\n    var fontSize = parseInt($input.css('font-size'), 10);\n    var minEm = 3;\n    var minPx = fontSize * minEm;\n    var rightPadEm = 3.25;\n    var rightPadPx = fontSize * rightPadEm;\n    var static_min_pad = 0.5 * fontSize;\n    setTimeout(function () {\n      var tmp = $('<div>', {\n        'text': $input.val()\n      });\n      tmp.css({\n        'position': 'absolute',\n        'white-space': 'nowrap',\n        'font-size': $input.css('font-size'),\n        'font-family': $input.css('font-family'),\n        'padding': $input.css('padding'),\n        'width': 'initial'\n      });\n      $input.parent().append(tmp);\n      var width = tmp.width();\n      var parentWidth = self.$questions.width();\n      tmp.remove();\n\n      if (width <= minPx) {\n        // Apply min width\n        $input.width(minPx + static_min_pad);\n      } else if (width + rightPadPx >= parentWidth) {\n        // Apply max width of parent\n        $input.width(parentWidth - rightPadPx);\n      } else {\n        // Apply width that wraps input\n        $input.width(width + static_min_pad);\n      }\n    }, 1);\n  };\n  /**\n   * Resize all text field growth to current size.\n   */\n\n\n  Blanks.prototype.resetGrowTextField = function () {\n    var self = this;\n    this.$questions.find('input').each(function () {\n      self.autoGrowTextField($(this));\n    });\n  };\n  /**\n   * Toggle buttons dependent of state.\n   *\n   * Using CSS-rules to conditionally show/hide using the data-attribute [data-state]\n   */\n\n\n  Blanks.prototype.toggleButtonVisibility = function (state) {\n    // The show solutions button is hidden if all answers are correct\n    var allCorrect = this.getScore() === this.getMaxScore();\n\n    if (this.params.behaviour.autoCheck && allCorrect) {\n      // We are viewing the solutions\n      state = STATE_FINISHED;\n    }\n\n    if (this.params.behaviour.enableSolutionsButton) {\n      if (state === STATE_CHECKING && !allCorrect) {\n        this.showButton('show-solution');\n      } else {\n        this.hideButton('show-solution');\n      }\n    }\n\n    if (this.params.behaviour.enableRetry) {\n      if (state === STATE_CHECKING && !allCorrect || state === STATE_SHOWING_SOLUTION) {\n        this.showButton('try-again');\n      } else {\n        this.hideButton('try-again');\n      }\n    }\n\n    if (state === STATE_ONGOING) {\n      this.showButton('check-answer');\n    } else {\n      this.hideButton('check-answer');\n    }\n\n    this.trigger('resize');\n  };\n  /**\n   * Check if solution is allowed. Warn user if not\n   */\n\n\n  Blanks.prototype.allowSolution = function () {\n    if (this.params.behaviour.showSolutionsRequiresInput === true) {\n      if (!this.allBlanksFilledOut()) {\n        this.updateFeedbackContent(this.params.notFilledOut);\n        this.read(this.params.notFilledOut);\n        return false;\n      }\n    }\n\n    return true;\n  };\n  /**\n   * Check if all blanks are filled out\n   *\n   * @method allBlanksFilledOut\n   * @return {boolean} Returns true if all blanks are filled out.\n   */\n\n\n  Blanks.prototype.allBlanksFilledOut = function () {\n    return !this.clozes.some(function (cloze) {\n      return !cloze.filledOut();\n    });\n  };\n  /**\n   * Mark which answers are correct and which are wrong and disable fields if retry is off.\n   */\n\n\n  Blanks.prototype.markResults = function () {\n    var self = this;\n\n    for (var i = 0; i < self.clozes.length; i++) {\n      self.clozes[i].checkAnswer();\n\n      if (!self.params.behaviour.enableRetry) {\n        self.clozes[i].disableInput();\n      }\n    }\n\n    this.trigger('resize');\n  };\n  /**\n   * Removed marked results\n   */\n\n\n  Blanks.prototype.removeMarkedResults = function () {\n    this.$questions.find('.h5p-input-wrapper').removeClass('h5p-correct h5p-wrong');\n    this.$questions.find('.h5p-input-wrapper > input').attr('disabled', false);\n    this.trigger('resize');\n  };\n  /**\n   * Displays the correct answers\n   * @param {boolean} [alwaysShowSolution]\n   *  Will always show solution if true\n   */\n\n\n  Blanks.prototype.showCorrectAnswers = function (alwaysShowSolution) {\n    if (!alwaysShowSolution && !this.allowSolution()) {\n      return;\n    }\n\n    this.toggleButtonVisibility(STATE_SHOWING_SOLUTION);\n    this.hideSolutions();\n\n    for (var i = 0; i < this.clozes.length; i++) {\n      this.clozes[i].showSolution();\n    }\n\n    this.trigger('resize');\n  };\n  /**\n   * Toggle input allowed for all input fields\n   *\n   * @method function\n   * @param  {boolean} enabled True if fields should allow input, otherwise false\n   */\n\n\n  Blanks.prototype.toggleAllInputs = function (enabled) {\n    for (var i = 0; i < this.clozes.length; i++) {\n      this.clozes[i].toggleInput(enabled);\n    }\n  };\n  /**\n   * Display the correct solution for the input boxes.\n   *\n   * This is invoked from CP and QS - be carefull!\n   */\n\n\n  Blanks.prototype.showSolutions = function () {\n    this.params.behaviour.enableSolutionsButton = true;\n    this.toggleButtonVisibility(STATE_FINISHED);\n    this.markResults();\n    this.showEvaluation();\n    this.showCorrectAnswers(true);\n    this.toggleAllInputs(false); //Hides all buttons in \"show solution\" mode.\n\n    this.hideButtons();\n  };\n  /**\n   * Resets the complete task.\n   * Used in contracts.\n   * @public\n   */\n\n\n  Blanks.prototype.resetTask = function () {\n    this.answered = false;\n    this.hideEvaluation();\n    this.hideSolutions();\n    this.clearAnswers();\n    this.removeMarkedResults();\n    this.toggleButtonVisibility(STATE_ONGOING);\n    this.resetGrowTextField();\n    this.toggleAllInputs(true);\n    this.done = false;\n  };\n  /**\n   * Hides all buttons.\n   * @public\n   */\n\n\n  Blanks.prototype.hideButtons = function () {\n    this.toggleButtonVisibility(STATE_FINISHED);\n  };\n  /**\n   * Trigger xAPI answered event\n   */\n\n\n  Blanks.prototype.triggerAnswered = function () {\n    this.answered = true;\n    var xAPIEvent = this.createXAPIEventTemplate('answered');\n    this.addQuestionToXAPI(xAPIEvent);\n    this.addResponseToXAPI(xAPIEvent);\n    this.trigger(xAPIEvent);\n  };\n  /**\n   * Get xAPI data.\n   * Contract used by report rendering engine.\n   *\n   * @see contract at {@link https://h5p.org/documentation/developers/contracts#guides-header-6}\n   */\n\n\n  Blanks.prototype.getXAPIData = function () {\n    var xAPIEvent = this.createXAPIEventTemplate('answered');\n    this.addQuestionToXAPI(xAPIEvent);\n    this.addResponseToXAPI(xAPIEvent);\n    return {\n      statement: xAPIEvent.data.statement\n    };\n  };\n  /**\n   * Generate xAPI object definition used in xAPI statements.\n   * @return {Object}\n   */\n\n\n  Blanks.prototype.getxAPIDefinition = function () {\n    var definition = {};\n    definition.description = {\n      'en-US': this.params.text\n    };\n    definition.type = 'http://adlnet.gov/expapi/activities/cmi.interaction';\n    definition.interactionType = 'fill-in';\n    var clozeSolutions = [];\n    var crp = ''; // xAPI forces us to create solution patterns for all possible solution combinations\n\n    for (var i = 0; i < this.params.questions.length; i++) {\n      var question = this.handleBlanks(this.params.questions[i], function (solution) {\n        // Collect all solution combinations for the H5P Alternative extension\n        clozeSolutions.push(solution.solutions); // Create a basic response pattern out of the first alternative for each blanks field\n\n        crp += (!crp ? '' : '[,]') + solution.solutions[0]; // We replace the solutions in the question with a \"blank\"\n\n        return '__________';\n      });\n      definition.description['en-US'] += question;\n    } // Set the basic response pattern (not supporting multiple alternatives for blanks)\n\n\n    definition.correctResponsesPattern = ['{case_matters=' + this.params.behaviour.caseSensitive + '}' + crp]; // Add the H5P Alternative extension which provides all the combinations of different answers\n    // Reporting software will need to support this extension for alternatives to work.\n\n    definition.extensions = definition.extensions || {};\n    definition.extensions[XAPI_CASE_SENSITIVITY] = this.params.behaviour.caseSensitive;\n    definition.extensions[XAPI_ALTERNATIVE_EXTENSION] = clozeSolutions;\n    return definition;\n  };\n  /**\n   * Add the question itselt to the definition part of an xAPIEvent\n   */\n\n\n  Blanks.prototype.addQuestionToXAPI = function (xAPIEvent) {\n    var definition = xAPIEvent.getVerifiedStatementValue(['object', 'definition']);\n    $.extend(true, definition, this.getxAPIDefinition()); // Set reporting module version if alternative extension is used\n\n    if (definition.extensions && definition.extensions[XAPI_ALTERNATIVE_EXTENSION]) {\n      var context = xAPIEvent.getVerifiedStatementValue(['context']);\n      context.extensions = context.extensions || {};\n      context.extensions[XAPI_REPORTING_VERSION_EXTENSION] = '1.1.0';\n    }\n  };\n  /**\n   * Parse the solution text (text between the asterisks)\n   *\n   * @param {string} solutionText\n   * @returns {object} with the following properties\n   *  - tip: the tip text for this solution, undefined if no tip\n   *  - solutions: array of solution words\n   */\n\n\n  Blanks.prototype.parseSolution = function (solutionText) {\n    var tip, solution, ttsID;\n    var tipStart = solutionText.indexOf(':');\n\n    if (tipStart !== -1) {\n      // Found tip, now extract\n      tip = solutionText.slice(tipStart + 1);\n      solution = solutionText.slice(0, tipStart);\n    } else {\n      solution = solutionText;\n    }\n\n    var ttsStart = solution.indexOf('$');\n\n    if (ttsStart !== -1) {\n      // Found ttsID, now extract\n      ttsID = solution.slice(ttsStart + 1);\n      solution = solution.slice(0, ttsStart);\n    } // Split up alternatives\n\n\n    var solutions = solution.split('/'); // Trim solutions\n\n    for (var i = 0; i < solutions.length; i++) {\n      solutions[i] = H5P.trim(solutions[i]); //decodes html entities\n\n      var elem = document.createElement('textarea');\n      elem.innerHTML = solutions[i];\n      solutions[i] = elem.value;\n    }\n\n    return {\n      tip: tip,\n      solutions: solutions,\n      ttsID: ttsID\n    };\n  };\n  /**\n   * Add the response part to an xAPI event\n   *\n   * @param {H5P.XAPIEvent} xAPIEvent\n   *  The xAPI event we will add a response to\n   */\n\n\n  Blanks.prototype.addResponseToXAPI = function (xAPIEvent) {\n    xAPIEvent.setScoredResult(this.getScore(), this.getMaxScore(), this);\n    xAPIEvent.data.statement.result.response = this.getxAPIResponse();\n  };\n  /**\n   * Generate xAPI user response, used in xAPI statements.\n   * @return {string} User answers separated by the \"[,]\" pattern\n   */\n\n\n  Blanks.prototype.getxAPIResponse = function () {\n    var usersAnswers = this.getCurrentState();\n    return usersAnswers.join('[,]');\n  };\n  /**\n   * Show evaluation widget, i.e: 'You got x of y blanks correct'\n   */\n\n\n  Blanks.prototype.showEvaluation = function () {\n    var maxScore = this.getMaxScore();\n    var score = this.getScore();\n    var scoreText = H5P.Question.determineOverallFeedback(this.params.overallFeedback, score / maxScore).replace('@score', score).replace('@total', maxScore);\n    this.setFeedback(scoreText, score, maxScore, this.params.scoreBarLabel);\n\n    if (score === maxScore) {\n      this.toggleButtonVisibility(STATE_FINISHED);\n    }\n  };\n  /**\n   * Hide the evaluation widget\n   */\n\n\n  Blanks.prototype.hideEvaluation = function () {\n    // Clear evaluation section.\n    this.removeFeedback();\n  };\n  /**\n   * Hide solutions. (/try again)\n   */\n\n\n  Blanks.prototype.hideSolutions = function () {\n    // Clean solution from quiz\n    this.$questions.find('.h5p-correct-answer').remove();\n  };\n  /**\n   * Get maximum number of correct answers.\n   *\n   * @returns {Number} Max points\n   */\n\n\n  Blanks.prototype.getMaxScore = function () {\n    var self = this;\n    return self.clozes.length;\n  };\n  /**\n   * Count the number of correct answers.\n   *\n   * @returns {Number} Points\n   */\n\n\n  Blanks.prototype.getScore = function () {\n    var self = this;\n    var correct = 0;\n\n    for (var i = 0; i < self.clozes.length; i++) {\n      if (self.clozes[i].correct()) {\n        correct++;\n      }\n\n      self.params.userAnswers[i] = self.clozes[i].getUserAnswer();\n    }\n\n    return correct;\n  };\n\n  Blanks.prototype.getTitle = function () {\n    return H5P.createTitle(this.contentData.metadata && this.contentData.metadata.title ? this.contentData.metadata.title : 'Fill In');\n  };\n  /**\n   * Clear the user's answers\n   */\n\n\n  Blanks.prototype.clearAnswers = function () {\n    this.clozes.forEach(function (cloze) {\n      cloze.setUserInput('');\n      cloze.resetAriaLabel();\n    });\n  };\n  /**\n   * Checks if all has been answered.\n   *\n   * @returns {Boolean}\n   */\n\n\n  Blanks.prototype.getAnswerGiven = function () {\n    return this.answered || !this.hasClozes;\n  };\n  /**\n   * Helps set focus the given input field.\n   * @param {jQuery} $input\n   */\n\n\n  Blanks.setFocus = function ($input) {\n    setTimeout(function () {\n      $input.focus();\n    }, 1);\n  };\n  /**\n   * Returns an object containing content of each cloze\n   *\n   * @returns {object} object containing content for each cloze\n   */\n\n\n  Blanks.prototype.getCurrentState = function () {\n    var clozesContent = []; // Get user input for every cloze\n\n    this.clozes.forEach(function (cloze) {\n      clozesContent.push(cloze.getUserInput());\n    });\n    return clozesContent;\n  };\n  /**\n   * Sets answers to current user state\n   */\n\n\n  Blanks.prototype.setH5PUserState = function () {\n    var self = this;\n    var isValidState = this.previousState !== undefined && this.previousState.length && this.previousState.length === this.clozes.length; // Check that stored user state is valid\n\n    if (!isValidState) {\n      return;\n    } // Set input from user state\n\n\n    var hasAllClozesFilled = true;\n    this.previousState.forEach(function (clozeContent, ccIndex) {\n      // Register that an answer has been given\n      if (clozeContent.length) {\n        self.answered = true;\n      }\n\n      var cloze = self.clozes[ccIndex];\n      cloze.setUserInput(clozeContent); // Handle instant feedback\n\n      if (self.params.behaviour.autoCheck) {\n        if (cloze.filledOut()) {\n          cloze.checkAnswer();\n        } else {\n          hasAllClozesFilled = false;\n        }\n      }\n    });\n\n    if (self.params.behaviour.autoCheck && hasAllClozesFilled) {\n      self.showEvaluation();\n      self.toggleButtonVisibility(STATE_CHECKING);\n    }\n  };\n  /**\n   * Disables any active input. Useful for freezing the task and dis-allowing\n   * modification of wrong answers.\n   */\n\n\n  Blanks.prototype.disableInput = function () {\n    this.$questions.find('input').attr('disabled', true);\n  };\n\n  return Blanks;\n}(H5P.jQuery, H5P.Question);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./H5P.Blanks/src/blanks.js\n");

/***/ })

/******/ });